{"ast":null,"code":"var _jsxFileName = \"/Users/ninatekkey/git/creativeproject-module7-490621/spotify_app/frontend/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport useAuth from \".UseAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: 'e6214187eccd44d89b73d411d987175f'\n});\nconst Dashboard = _ref => {\n  _s();\n  var _playingTrack;\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  u;\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    (async () => {\n      const {\n        body\n      } = await spotifyApi.searchTracks(search);\n      if (cancel) return;\n      setSearchResults(body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    })();\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(DashBoardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(SearchInput, {\n      type: \"search\",\n      placeholder: \"Search Songs/Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultsContainer, {\n      children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(LyricsContainer, {\n        children: lyrics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerContainer, {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: (_playingTrack = playingTrack) === null || _playingTrack === void 0 ? void 0 : _playingTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"+6EvMIFMQWs9MIeKS3zEWyFvPDo=\", false, function () {\n  return [useAuth];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","SpotifyWebApi","axios","spotifyApi","clientId","Dashboard","code","accessToken","u","setAccessToken","search","setSearchResults","cancel","body","searchTracks","tracks","items","map","track","smallestAlbumImage","album","images","reduce","smallest","image","height","artist","artists","name","title","uri","albumUrl","url","e","setSearch","target","value","searchResults","chooseTrack","length","lyrics","playingTrack"],"sources":["/Users/ninatekkey/git/creativeproject-module7-490621/spotify_app/frontend/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\n\nimport useAuth from \".UseAuth\"\n\nimport SpotifyWebApi from \"spotify-web-api-node\"\nimport axios from \"axios\"\n\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: 'e6214187eccd44d89b73d411d987175f',\n})\n\nconst Dashboard = ({ code }) => {\n  const accessToken = useAuth(code)\n\n\n \n\n  u\n\n  useEffect(() => {\n    if (!accessToken) return\n    spotifyApi.setAccessToken(accessToken)\n  }, [accessToken])\n\n  useEffect(() => {\n    if (!search) return setSearchResults([])\n    if (!accessToken) return\n\n    let cancel = false\n    ;(async () => {\n      const { body } = await spotifyApi.searchTracks(search)\n      if (cancel) return\n      setSearchResults(\n        body.tracks.items.map(track => {\n          const smallestAlbumImage = track.album.images.reduce(\n            (smallest, image) => {\n              if (image.height < smallest.height) return image\n              return smallest\n            },\n            track.album.images[0]\n          )\n\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallestAlbumImage.url,\n          }\n        })\n      )\n    })()\n\n    return () => (cancel = true)\n  }, [search, accessToken])\n\n  return (\n    <DashBoardContainer>\n      <SearchInput\n        type=\"search\"\n        placeholder=\"Search Songs/Artists\"\n        value={search}\n        onChange={e => setSearch(e.target.value)}\n      />\n      <ResultsContainer>\n        {searchResults.map(track => (\n          <TrackSearchResult\n            track={track}\n            key={track.uri}\n            chooseTrack={chooseTrack}\n          />\n        ))}\n        {searchResults.length === 0 && (\n          <LyricsContainer>{lyrics}</LyricsContainer>\n        )}\n      </ResultsContainer>\n      <PlayerContainer>\n        <Player accessToken={accessToken} trackUri={playingTrack?.uri} />\n      </PlayerContainer>\n    </DashBoardContainer>\n  )\n}\n\nexport default Dashboard"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}